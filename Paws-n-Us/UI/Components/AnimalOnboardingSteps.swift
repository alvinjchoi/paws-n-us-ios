import SwiftUI
import PhotosUI

// MARK: - Basic Info Step
struct BasicInfoStepView: View {
    @ObservedObject var viewModel: AnimalOnboardingViewModel
    
    var body: some View {
        VStack(alignment: .leading, spacing: 32) {
            Text("Í∏∞Î≥∏ Ï†ïÎ≥¥")
                .font(.system(size: 28, weight: .bold))
            
            VStack(alignment: .leading, spacing: 24) {
                VStack(alignment: .leading, spacing: 8) {
                    Text("Ïù¥Î¶Ñ *")
                        .font(.system(size: 16, weight: .medium))
                    TextField("Ïòà: Î∞îÎëëÏù¥", text: $viewModel.animalData.name)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                }
                
                VStack(alignment: .leading, spacing: 8) {
                    Text("ÎèôÎ¨º Ï¢ÖÎ•ò *")
                        .font(.system(size: 16, weight: .medium))
                    Picker("Ï¢ÖÎ•ò", selection: $viewModel.animalData.species) {
                        Text("ÏÑ†ÌÉù").tag("")
                        Text("Í∞ïÏïÑÏßÄ").tag("dog")
                        Text("Í≥†ÏñëÏù¥").tag("cat")
                    }
                    .pickerStyle(SegmentedPickerStyle())
                }
                
                VStack(alignment: .leading, spacing: 8) {
                    Text("ÎÇòÏù¥ *")
                        .font(.system(size: 16, weight: .medium))
                    
                    HStack(spacing: 16) {
                        // Years picker
                        VStack(spacing: 4) {
                            Text("ÎÖÑ")
                                .font(.system(size: 14, weight: .medium))
                                .foregroundColor(.secondary)
                            
                            Picker("Years", selection: $viewModel.animalData.ageYears) {
                                ForEach(0...20, id: \.self) { year in
                                    Text("\(year)")
                                        .tag(year)
                                }
                            }
                            .pickerStyle(WheelPickerStyle())
                            .frame(width: 80, height: 120)
                            .clipped()
                        }
                        
                        // Months picker
                        VStack(spacing: 4) {
                            Text("Í∞úÏõî")
                                .font(.system(size: 14, weight: .medium))
                                .foregroundColor(.secondary)
                            
                            Picker("Months", selection: $viewModel.animalData.ageMonths) {
                                ForEach(0...11, id: \.self) { month in
                                    Text("\(month)")
                                        .tag(month)
                                }
                            }
                            .pickerStyle(WheelPickerStyle())
                            .frame(width: 80, height: 120)
                            .clipped()
                        }
                        
                        Spacer()
                    }
                    .padding(.vertical, 8)
                    .background(Color(.systemGray6))
                    .cornerRadius(8)
                }
                
                VStack(alignment: .leading, spacing: 8) {
                    Text("ÏÑ±Î≥Ñ")
                        .font(.system(size: 16, weight: .medium))
                    Picker("ÏÑ±Î≥Ñ", selection: $viewModel.animalData.gender) {
                        Text("ÏÑ†ÌÉù").tag("")
                        Text("ÏàòÏª∑").tag("male")
                        Text("ÏïîÏª∑").tag("female")
                    }
                    .pickerStyle(SegmentedPickerStyle())
                }
                
                VStack(alignment: .leading, spacing: 8) {
                    Text("ÌÅ¨Í∏∞")
                        .font(.system(size: 16, weight: .medium))
                    Picker("ÌÅ¨Í∏∞", selection: $viewModel.animalData.size) {
                        Text("ÏÜåÌòï").tag("small")
                        Text("Ï§ëÌòï").tag("medium")
                        Text("ÎåÄÌòï").tag("large")
                    }
                    .pickerStyle(SegmentedPickerStyle())
                }
            }
            
            Spacer()
        }
        .padding()
    }
}

// MARK: - Photos Step
struct PhotosStepView: View {
    @ObservedObject var viewModel: AnimalOnboardingViewModel
    
    var body: some View {
        if #available(iOS 16.0, *) {
            PhotosStepViewModern(viewModel: viewModel)
        } else {
            PhotosStepViewLegacy(viewModel: viewModel)
        }
    }
}

@available(iOS 16.0, *)
struct PhotosStepViewModern: View {
    @ObservedObject var viewModel: AnimalOnboardingViewModel
    @State private var selectedImages: [PhotosPickerItem] = []
    
    var body: some View {
        VStack(alignment: .leading, spacing: 32) {
            Text("üì∑ ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú")
                .font(.system(size: 28, weight: .bold))
            
            Text("ÎèôÎ¨ºÏùò Îß§Î†•Ï†ÅÏù∏ ÏÇ¨ÏßÑÎì§ÏùÑ Ï∂îÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî. ÏµúÏÜå 1Ïû•Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.")
                .font(.system(size: 16))
                .foregroundColor(.secondary)
            
            LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 3), spacing: 12) {
                ForEach(Array(viewModel.animalData.photos.enumerated()), id: \.offset) { index, image in
                    ZStack(alignment: .topTrailing) {
                        Image(uiImage: image)
                            .resizable()
                            .aspectRatio(contentMode: .fill)
                            .frame(height: 100)
                            .clipped()
                            .cornerRadius(8)
                        
                        Button(action: {
                            viewModel.animalData.photos.remove(at: index)
                        }) {
                            Image(systemName: "xmark.circle.fill")
                                .foregroundColor(.white)
                                .background(Color.black.opacity(0.6))
                                .clipShape(Circle())
                        }
                        .padding(4)
                    }
                }
                
                if viewModel.animalData.photos.count < 10 {
                    PhotosPicker(
                        selection: $selectedImages,
                        maxSelectionCount: 10 - viewModel.animalData.photos.count,
                        matching: .images
                    ) {
                        VStack {
                            Image(systemName: "plus")
                                .font(.system(size: 24))
                                .foregroundColor(.gray)
                            Text("ÏÇ¨ÏßÑ Ï∂îÍ∞Ä")
                                .font(.system(size: 12))
                                .foregroundColor(.gray)
                        }
                        .frame(height: 100)
                        .frame(maxWidth: .infinity)
                        .background(Color(.systemGray6))
                        .cornerRadius(8)
                    }
                    .onChange(of: selectedImages) { _, newItems in
                        Task {
                            await loadSelectedImages(newItems)
                        }
                    }
                }
            }
            
            Spacer()
        }
        .padding()
    }
    
    private func loadSelectedImages(_ items: [PhotosPickerItem]) async {
        // Loading selected images
        for item in items {
            if let data = try? await item.loadTransferable(type: Data.self),
               let image = UIImage(data: data) {
                await MainActor.run {
                    viewModel.animalData.photos.append(image)
                    // Added photo
                }
            }
        }
        // Clear selection after loading
        await MainActor.run {
            selectedImages = []
        }
    }
}

struct PhotosStepViewLegacy: View {
    @ObservedObject var viewModel: AnimalOnboardingViewModel
    @State private var showingImagePicker = false
    
    var body: some View {
        VStack(alignment: .leading, spacing: 32) {
            Text("üì∑ ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú")
                .font(.system(size: 28, weight: .bold))
            
            Text("ÎèôÎ¨ºÏùò Îß§Î†•Ï†ÅÏù∏ ÏÇ¨ÏßÑÎì§ÏùÑ Ï∂îÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî. ÏµúÏÜå 1Ïû•Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.")
                .font(.system(size: 16))
                .foregroundColor(.secondary)
            
            LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 3), spacing: 12) {
                ForEach(Array(viewModel.animalData.photos.enumerated()), id: \.offset) { index, image in
                    ZStack(alignment: .topTrailing) {
                        Image(uiImage: image)
                            .resizable()
                            .aspectRatio(contentMode: .fill)
                            .frame(height: 100)
                            .clipped()
                            .cornerRadius(8)
                        
                        Button(action: {
                            viewModel.animalData.photos.remove(at: index)
                        }) {
                            Image(systemName: "xmark.circle.fill")
                                .foregroundColor(.white)
                                .background(Color.black.opacity(0.6))
                                .clipShape(Circle())
                        }
                        .padding(4)
                    }
                }
                
                if viewModel.animalData.photos.count < 10 {
                    Button(action: {
                        showingImagePicker = true
                    }) {
                        VStack {
                            Image(systemName: "plus")
                                .font(.system(size: 24))
                                .foregroundColor(.gray)
                            Text("ÏÇ¨ÏßÑ Ï∂îÍ∞Ä")
                                .font(.system(size: 12))
                                .foregroundColor(.gray)
                        }
                        .frame(height: 100)
                        .frame(maxWidth: .infinity)
                        .background(Color(.systemGray6))
                        .cornerRadius(8)
                    }
                    .sheet(isPresented: $showingImagePicker) {
                        ImagePickerLegacy { images in
                            viewModel.animalData.photos.append(contentsOf: images)
                        }
                    }
                }
            }
            
            Spacer()
        }
        .padding()
    }
}

// MARK: - Characteristics Step  
struct CharacteristicsStepView: View {
    @ObservedObject var viewModel: AnimalOnboardingViewModel
    
    private let exampleText = """
    Ï≤òÏùåÏóî Îã§ÏÜå ÏÜåÏã¨Ìïú ÏÑ±Í≤©ÏúºÎ°ú ÏÇ¨ÎûåÏùÑ ÌîºÌïòÎ†§Îäî Í≤ΩÌñ•Ïù¥ ÏûàÏóàÏßÄÎßå, Î™©ÏöïÎèÑ ÏãúÏºúÏ£ºÍ≥† ÏïÑÏù¥ÏôÄ Ìï®Íªò ÎÜÄÏïÑÏ£ºÎã§ Î≥¥Îãà Ï†êÏ∞® Í≤ΩÍ≥ÑÎ•º ÌóàÎ¨ºÍ≥† ÏÇ¨ÎûåÏóê ÎåÄÌïú Ïã†Î¢∞Î•º ÏåìÏïÑÍ∞ÄÍ≥† ÏûàÏäµÎãàÎã§. Ïù¥Ï†úÎäî ÏûêÏã†Í∞ê ÏûàÍ≤å Ïû•ÎÇúÍ∞êÏùÑ Í∞ÄÏßÄÍ≥† ÎÜÄÎ©∞, ÏÇ¨ÎûåÏùÑ Ï¢ãÏïÑÌïòÎäî ÏàúÌïòÍ≥† ÏÇ¨ÎûëÏä§Îü¨Ïö¥ ÏïÑÏù¥Î°ú Î≥ÄÌñàÏñ¥Ïöî. Í±¥Í∞ïÌïú ÏóêÎÑàÏßÄÏôÄ Ìò∏Í∏∞Ïã¨ Í∞ÄÎìùÌïú ÎààÎπõÏùÑ Í∞ÄÏßÑ Ïù¥ Í∑ÄÏóºÎë•Ïù¥Îäî Ïûò Î®πÍ≥† Ïûò Îõ∞Ïñ¥ÎÜÄÎ©∞ ÌïòÎ£®ÌïòÎ£® Î∞ùÍ≤å ÏûêÎùºÍ≥† ÏûàÏäµÎãàÎã§.
    """
    
    var body: some View {
        VStack(alignment: .leading, spacing: 32) {
            Text("üêæ ÏÑ±Í≤©Í≥º ÌäπÏßï")
                .font(.system(size: 28, weight: .bold))
            
            VStack(alignment: .leading, spacing: 24) {
                VStack(alignment: .leading, spacing: 8) {
                    Text("ÏÜåÍ∞úÍ∏Ä *")
                        .font(.system(size: 16, weight: .medium))
                    
                    ZStack(alignment: .topLeading) {
                        if viewModel.animalData.bio.isEmpty {
                            Text(exampleText)
                                .font(.system(size: 14))
                                .foregroundColor(.gray)
                                .padding(.top, 10)
                                .padding(.horizontal, 12)
                                .allowsHitTesting(false)
                        }
                        
                        TextEditor(text: $viewModel.animalData.bio)
                            .font(.system(size: 14))
                            .frame(minHeight: 150)
                            .padding(8)
                            .background(Color(.systemGray6))
                            .cornerRadius(8)
                            .opacity(viewModel.animalData.bio.isEmpty ? 0.25 : 1)
                    }
                }
                
                if viewModel.animalData.bio.isEmpty {
                    VStack(alignment: .leading, spacing: 8) {
                        Label("ÏòàÏãú ÎÇ¥Ïö©ÏûÖÎãàÎã§", systemImage: "lightbulb")
                            .font(.system(size: 12, weight: .medium))
                            .foregroundColor(.blue)
                        
                        Text("ÏïÑÏù¥Ïùò ÏÑ±Í≤© Î≥ÄÌôî, ÌäπÎ≥ÑÌïú ÏäµÍ¥Ä, Ï¢ãÏïÑÌïòÎäî Í≤ÉÎì§ÏùÑ ÏûêÏÑ∏Ìûà Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî.")
                            .font(.system(size: 12))
                            .foregroundColor(.secondary)
                    }
                    .padding(.horizontal, 4)
                }
            }
            
            Spacer()
        }
        .padding()
    }
}

// MARK: - Medical Step
struct MedicalStepView: View {
    @ObservedObject var viewModel: AnimalOnboardingViewModel
    
    var body: some View {
        VStack(alignment: .leading, spacing: 32) {
            Text("üè• Í±¥Í∞ïÏ†ïÎ≥¥")
                .font(.system(size: 28, weight: .bold))
            
            VStack(alignment: .leading, spacing: 24) {
                // Í±¥Í∞ï ÏÉÅÌÉú
                VStack(alignment: .leading, spacing: 8) {
                    Text("ÌòÑÏû¨ Í±¥Í∞ï ÏÉÅÌÉú *")
                        .font(.system(size: 16, weight: .medium))
                    Picker("Í±¥Í∞ïÏÉÅÌÉú", selection: $viewModel.animalData.medicalStatus) {
                        Text("ÏÑ†ÌÉù").tag("")
                        Text("Í±¥Í∞ïÌï®").tag("healthy")
                        Text("ÏπòÎ£å ÌïÑÏöî").tag("needs_treatment")
                        Text("ÌöåÎ≥µ Ï§ë").tag("recovering")
                    }
                    .pickerStyle(SegmentedPickerStyle())
                }
                
                // Î∞±Ïã† Ï†ëÏ¢Ö
                VStack(alignment: .leading, spacing: 8) {
                    Text("Î∞±Ïã† Ï†ëÏ¢Ö")
                        .font(.system(size: 16, weight: .medium))
                    HStack(spacing: 12) {
                        Button(action: {
                            viewModel.animalData.vaccinations = viewModel.animalData.vaccinations == "completed" ? "" : "completed"
                        }) {
                            HStack(spacing: 6) {
                                Image(systemName: viewModel.animalData.vaccinations == "completed" ? "checkmark.circle.fill" : "circle")
                                    .foregroundColor(viewModel.animalData.vaccinations == "completed" ? .green : .gray)
                                Text("Ï¢ÖÌï© Î∞±Ïã†")
                                    .foregroundColor(.primary)
                            }
                        }
                        
                        Button(action: {
                            viewModel.animalData.isSpayedNeutered = !(viewModel.animalData.isSpayedNeutered ?? false)
                        }) {
                            HStack(spacing: 6) {
                                Image(systemName: (viewModel.animalData.isSpayedNeutered ?? false) ? "checkmark.circle.fill" : "circle")
                                    .foregroundColor((viewModel.animalData.isSpayedNeutered ?? false) ? .green : .gray)
                                Text("Ï§ëÏÑ±Ìôî")
                                    .foregroundColor(.primary)
                            }
                        }
                    }
                    .buttonStyle(PlainButtonStyle())
                }
                
                // Ï≤¥Ï§ë
                VStack(alignment: .leading, spacing: 8) {
                    Text("Î™∏Î¨¥Í≤å")
                        .font(.system(size: 16, weight: .medium))
                    HStack {
                        TextField("0.0", value: $viewModel.animalData.weight, format: .number)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                            .keyboardType(.decimalPad)
                            .frame(width: 100)
                        Text("kg")
                            .foregroundColor(.secondary)
                    }
                }
                
                // Ï∂îÍ∞Ä ÏùòÎ£å Ï†ïÎ≥¥
                VStack(alignment: .leading, spacing: 8) {
                    Text("Í∏∞ÌÉÄ Í±¥Í∞ï Ï†ïÎ≥¥")
                        .font(.system(size: 16, weight: .medium))
                    TextEditor(text: $viewModel.animalData.medicalNotes)
                        .frame(minHeight: 80)
                        .padding(8)
                        .background(Color(.systemGray6))
                        .cornerRadius(8)
                    Text("Ïòà: ÏßÄÏïåÎîîÏïÑ ÏùåÏÑ±, ÌîºÎ∂ÄÎ≥ë ÏπòÎ£å ÏôÑÎ£å, ÏïåÎ†àÎ•¥Í∏∞ ÏóÜÏùå Îì±")
                        .font(.system(size: 12))
                        .foregroundColor(.secondary)
                }
            }
            
            Spacer()
        }
        .padding()
    }
}

// MARK: - Location Step
struct LocationStepView: View {
    @ObservedObject var viewModel: AnimalOnboardingViewModel
    
    var body: some View {
        VStack(alignment: .leading, spacing: 32) {
            Text("üìç ÏúÑÏπò Ï†ïÎ≥¥")
                .font(.system(size: 28, weight: .bold))
            
            VStack(alignment: .leading, spacing: 24) {
                VStack(alignment: .leading, spacing: 8) {
                    Text("ÌòÑÏû¨ Î≥¥Ìò∏ ÏúÑÏπò *")
                        .font(.system(size: 16, weight: .medium))
                    TextField("Ïòà: ÏÑúÏö∏Ïãú Í∞ïÎÇ®Íµ¨", text: $viewModel.animalData.location)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                }
                
                VStack(alignment: .leading, spacing: 8) {
                    Text("Íµ¨Ï°∞ Ïù¥ÏïºÍ∏∞")
                        .font(.system(size: 16, weight: .medium))
                    TextEditor(text: $viewModel.animalData.rescueStory)
                        .frame(minHeight: 100)
                        .padding(8)
                        .background(Color(.systemGray6))
                        .cornerRadius(8)
                }
            }
            
            Spacer()
        }
        .padding()
    }
}

// MARK: - Review Step
struct ReviewStepView: View {
    @ObservedObject var viewModel: AnimalOnboardingViewModel
    
    var body: some View {
        VStack(alignment: .leading, spacing: 32) {
            Text("‚ú® ÌïÑÏöîÌïú ÎèÑÏõÄ ÏÑ†ÌÉù")
                .font(.system(size: 28, weight: .bold))
                
            Text("Ïù¥ ÏïÑÏù¥ÏóêÍ≤å ÌïÑÏöîÌïú ÎèÑÏõÄÏùò Ï¢ÖÎ•òÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.")
                .font(.system(size: 16))
                .foregroundColor(.secondary)
            
            VStack(spacing: 16) {
                HelpTypeButton(
                    title: "üöï Ïù¥Îèô Î¥âÏÇ¨",
                    description: "Î≥ëÏõê Ïù¥Îèô, ÏûÖÏñë ÎßåÎÇ® Îì± ÍµêÌÜµ ÏßÄÏõê",
                    isSelected: viewModel.animalData.helpTypes.contains("transport"),
                    onToggle: { viewModel.animalData.toggleHelpType("transport") }
                )
                
                HelpTypeButton(
                    title: "üè° ÏûÑÏãú Î≥¥Ìò∏",
                    description: "Îã®Í∏∞ Î≥¥Ìò∏ Í∞ÄÏ†ïÏóêÏÑú ÏûÑÏãú ÎèåÎ¥Ñ",
                    isSelected: viewModel.animalData.helpTypes.contains("temporary_care"),
                    onToggle: { viewModel.animalData.toggleHelpType("temporary_care") }
                )
                
                HelpTypeButton(
                    title: "üßº ÎØ∏Ïö© ÏßÄÏõê",
                    description: "Î™©Ïöï, ÌÑ∏ Í¥ÄÎ¶¨ Îì± ÎØ∏Ïö© ÏÑúÎπÑÏä§",
                    isSelected: viewModel.animalData.helpTypes.contains("grooming"),
                    onToggle: { viewModel.animalData.toggleHelpType("grooming") }
                )
            }
            
            Spacer()
        }
        .padding()
    }
}

// MARK: - Helper Views
struct HelpTypeButton: View {
    let title: String
    let description: String
    let isSelected: Bool
    let onToggle: () -> Void
    
    var body: some View {
        Button(action: onToggle) {
            HStack(spacing: 16) {
                VStack(alignment: .leading, spacing: 4) {
                    Text(title)
                        .font(.system(size: 16, weight: .medium))
                        .foregroundColor(.primary)
                    Text(description)
                        .font(.system(size: 14))
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.leading)
                }
                
                Spacer()
                
                Image(systemName: isSelected ? "checkmark.circle.fill" : "circle")
                    .font(.system(size: 20))
                    .foregroundColor(isSelected ? .green : .gray)
            }
            .padding(16)
            .background(isSelected ? Color(.systemGreen).opacity(0.1) : Color(.systemGray6))
            .cornerRadius(12)
            .overlay(
                RoundedRectangle(cornerRadius: 12)
                    .stroke(isSelected ? Color.green : Color.clear, lineWidth: 2)
            )
        }
        .buttonStyle(PlainButtonStyle())
    }
}

// MARK: - Legacy Image Picker for iOS 15
struct ImagePickerLegacy: UIViewControllerRepresentable {
    let onImagesSelected: ([UIImage]) -> Void
    
    func makeUIViewController(context: Context) -> UIImagePickerController {
        let picker = UIImagePickerController()
        picker.delegate = context.coordinator
        picker.sourceType = .photoLibrary
        picker.allowsEditing = false
        return picker
    }
    
    func updateUIViewController(_ uiViewController: UIImagePickerController, context: Context) {}
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    class Coordinator: NSObject, UIImagePickerControllerDelegate, UINavigationControllerDelegate {
        let parent: ImagePickerLegacy
        
        init(_ parent: ImagePickerLegacy) {
            self.parent = parent
        }
        
        func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey: Any]) {
            if let image = info[.originalImage] as? UIImage {
                parent.onImagesSelected([image])
            }
            picker.dismiss(animated: true)
        }
        
        func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
            picker.dismiss(animated: true)
        }
    }
}